/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.gerald.model.avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class MyRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 5001846737035720646L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"MyRecord\",\"namespace\":\"com.gerald.model.avro\",\"fields\":[{\"name\":\"myStrings\",\"type\":{\"type\":\"array\",\"items\":\"string\",\"java-class\":\"java.utils.ArrayList\"}},{\"name\":\"optionalString\",\"type\":[\"string\",\"null\"],\"default\":\"defaultValueTest\"},{\"name\":\"suit\",\"type\":[{\"type\":\"enum\",\"name\":\"Suit\",\"symbols\":[\"SPADES\",\"DIAMONDS\",\"CLUBS\",\"HEARTS\"]},\"null\"],\"default\":\"SPADES\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<MyRecord> ENCODER =
      new BinaryMessageEncoder<MyRecord>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<MyRecord> DECODER =
      new BinaryMessageDecoder<MyRecord>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<MyRecord> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<MyRecord> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<MyRecord>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this MyRecord to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a MyRecord from a ByteBuffer. */
  public static MyRecord fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.util.List<java.lang.CharSequence> myStrings;
  @Deprecated public java.lang.CharSequence optionalString;
  @Deprecated public com.gerald.model.avro.Suit suit;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public MyRecord() {}

  /**
   * All-args constructor.
   * @param myStrings The new value for myStrings
   * @param optionalString The new value for optionalString
   * @param suit The new value for suit
   */
  public MyRecord(java.util.List<java.lang.CharSequence> myStrings, java.lang.CharSequence optionalString, com.gerald.model.avro.Suit suit) {
    this.myStrings = myStrings;
    this.optionalString = optionalString;
    this.suit = suit;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return myStrings;
    case 1: return optionalString;
    case 2: return suit;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: myStrings = (java.util.List<java.lang.CharSequence>)value$; break;
    case 1: optionalString = (java.lang.CharSequence)value$; break;
    case 2: suit = (com.gerald.model.avro.Suit)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'myStrings' field.
   * @return The value of the 'myStrings' field.
   */
  public java.util.List<java.lang.CharSequence> getMyStrings() {
    return myStrings;
  }

  /**
   * Sets the value of the 'myStrings' field.
   * @param value the value to set.
   */
  public void setMyStrings(java.util.List<java.lang.CharSequence> value) {
    this.myStrings = value;
  }

  /**
   * Gets the value of the 'optionalString' field.
   * @return The value of the 'optionalString' field.
   */
  public java.lang.CharSequence getOptionalString() {
    return optionalString;
  }

  /**
   * Sets the value of the 'optionalString' field.
   * @param value the value to set.
   */
  public void setOptionalString(java.lang.CharSequence value) {
    this.optionalString = value;
  }

  /**
   * Gets the value of the 'suit' field.
   * @return The value of the 'suit' field.
   */
  public com.gerald.model.avro.Suit getSuit() {
    return suit;
  }

  /**
   * Sets the value of the 'suit' field.
   * @param value the value to set.
   */
  public void setSuit(com.gerald.model.avro.Suit value) {
    this.suit = value;
  }

  /**
   * Creates a new MyRecord RecordBuilder.
   * @return A new MyRecord RecordBuilder
   */
  public static com.gerald.model.avro.MyRecord.Builder newBuilder() {
    return new com.gerald.model.avro.MyRecord.Builder();
  }

  /**
   * Creates a new MyRecord RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new MyRecord RecordBuilder
   */
  public static com.gerald.model.avro.MyRecord.Builder newBuilder(com.gerald.model.avro.MyRecord.Builder other) {
    return new com.gerald.model.avro.MyRecord.Builder(other);
  }

  /**
   * Creates a new MyRecord RecordBuilder by copying an existing MyRecord instance.
   * @param other The existing instance to copy.
   * @return A new MyRecord RecordBuilder
   */
  public static com.gerald.model.avro.MyRecord.Builder newBuilder(com.gerald.model.avro.MyRecord other) {
    return new com.gerald.model.avro.MyRecord.Builder(other);
  }

  /**
   * RecordBuilder for MyRecord instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<MyRecord>
    implements org.apache.avro.data.RecordBuilder<MyRecord> {

    private java.util.List<java.lang.CharSequence> myStrings;
    private java.lang.CharSequence optionalString;
    private com.gerald.model.avro.Suit suit;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.gerald.model.avro.MyRecord.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.myStrings)) {
        this.myStrings = data().deepCopy(fields()[0].schema(), other.myStrings);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.optionalString)) {
        this.optionalString = data().deepCopy(fields()[1].schema(), other.optionalString);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.suit)) {
        this.suit = data().deepCopy(fields()[2].schema(), other.suit);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing MyRecord instance
     * @param other The existing instance to copy.
     */
    private Builder(com.gerald.model.avro.MyRecord other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.myStrings)) {
        this.myStrings = data().deepCopy(fields()[0].schema(), other.myStrings);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.optionalString)) {
        this.optionalString = data().deepCopy(fields()[1].schema(), other.optionalString);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.suit)) {
        this.suit = data().deepCopy(fields()[2].schema(), other.suit);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'myStrings' field.
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getMyStrings() {
      return myStrings;
    }

    /**
      * Sets the value of the 'myStrings' field.
      * @param value The value of 'myStrings'.
      * @return This builder.
      */
    public com.gerald.model.avro.MyRecord.Builder setMyStrings(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[0], value);
      this.myStrings = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'myStrings' field has been set.
      * @return True if the 'myStrings' field has been set, false otherwise.
      */
    public boolean hasMyStrings() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'myStrings' field.
      * @return This builder.
      */
    public com.gerald.model.avro.MyRecord.Builder clearMyStrings() {
      myStrings = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'optionalString' field.
      * @return The value.
      */
    public java.lang.CharSequence getOptionalString() {
      return optionalString;
    }

    /**
      * Sets the value of the 'optionalString' field.
      * @param value The value of 'optionalString'.
      * @return This builder.
      */
    public com.gerald.model.avro.MyRecord.Builder setOptionalString(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.optionalString = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'optionalString' field has been set.
      * @return True if the 'optionalString' field has been set, false otherwise.
      */
    public boolean hasOptionalString() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'optionalString' field.
      * @return This builder.
      */
    public com.gerald.model.avro.MyRecord.Builder clearOptionalString() {
      optionalString = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'suit' field.
      * @return The value.
      */
    public com.gerald.model.avro.Suit getSuit() {
      return suit;
    }

    /**
      * Sets the value of the 'suit' field.
      * @param value The value of 'suit'.
      * @return This builder.
      */
    public com.gerald.model.avro.MyRecord.Builder setSuit(com.gerald.model.avro.Suit value) {
      validate(fields()[2], value);
      this.suit = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'suit' field has been set.
      * @return True if the 'suit' field has been set, false otherwise.
      */
    public boolean hasSuit() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'suit' field.
      * @return This builder.
      */
    public com.gerald.model.avro.MyRecord.Builder clearSuit() {
      suit = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public MyRecord build() {
      try {
        MyRecord record = new MyRecord();
        record.myStrings = fieldSetFlags()[0] ? this.myStrings : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[0]);
        record.optionalString = fieldSetFlags()[1] ? this.optionalString : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.suit = fieldSetFlags()[2] ? this.suit : (com.gerald.model.avro.Suit) defaultValue(fields()[2]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<MyRecord>
    WRITER$ = (org.apache.avro.io.DatumWriter<MyRecord>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<MyRecord>
    READER$ = (org.apache.avro.io.DatumReader<MyRecord>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
