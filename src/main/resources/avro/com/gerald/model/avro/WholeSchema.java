/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.gerald.model.avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class WholeSchema extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 3313588204869301660L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"WholeSchema\",\"namespace\":\"com.gerald.model.avro\",\"fields\":[{\"name\":\"myRecord\",\"type\":{\"type\":\"record\",\"name\":\"MyRecord\",\"fields\":[{\"name\":\"myStrings\",\"type\":{\"type\":\"array\",\"items\":\"string\",\"java-class\":\"java.utils.ArrayList\"}},{\"name\":\"optionalString\",\"type\":[\"string\",\"null\"],\"default\":\"defaultValueTest\"},{\"name\":\"suit\",\"type\":[{\"type\":\"enum\",\"name\":\"Suit\",\"symbols\":[\"SPADES\",\"DIAMONDS\",\"CLUBS\",\"HEARTS\"]},\"null\"],\"default\":\"SPADES\"}]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<WholeSchema> ENCODER =
      new BinaryMessageEncoder<WholeSchema>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<WholeSchema> DECODER =
      new BinaryMessageDecoder<WholeSchema>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<WholeSchema> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<WholeSchema> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<WholeSchema>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this WholeSchema to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a WholeSchema from a ByteBuffer. */
  public static WholeSchema fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public com.gerald.model.avro.MyRecord myRecord;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public WholeSchema() {}

  /**
   * All-args constructor.
   * @param myRecord The new value for myRecord
   */
  public WholeSchema(com.gerald.model.avro.MyRecord myRecord) {
    this.myRecord = myRecord;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return myRecord;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: myRecord = (com.gerald.model.avro.MyRecord)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'myRecord' field.
   * @return The value of the 'myRecord' field.
   */
  public com.gerald.model.avro.MyRecord getMyRecord() {
    return myRecord;
  }

  /**
   * Sets the value of the 'myRecord' field.
   * @param value the value to set.
   */
  public void setMyRecord(com.gerald.model.avro.MyRecord value) {
    this.myRecord = value;
  }

  /**
   * Creates a new WholeSchema RecordBuilder.
   * @return A new WholeSchema RecordBuilder
   */
  public static com.gerald.model.avro.WholeSchema.Builder newBuilder() {
    return new com.gerald.model.avro.WholeSchema.Builder();
  }

  /**
   * Creates a new WholeSchema RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new WholeSchema RecordBuilder
   */
  public static com.gerald.model.avro.WholeSchema.Builder newBuilder(com.gerald.model.avro.WholeSchema.Builder other) {
    return new com.gerald.model.avro.WholeSchema.Builder(other);
  }

  /**
   * Creates a new WholeSchema RecordBuilder by copying an existing WholeSchema instance.
   * @param other The existing instance to copy.
   * @return A new WholeSchema RecordBuilder
   */
  public static com.gerald.model.avro.WholeSchema.Builder newBuilder(com.gerald.model.avro.WholeSchema other) {
    return new com.gerald.model.avro.WholeSchema.Builder(other);
  }

  /**
   * RecordBuilder for WholeSchema instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<WholeSchema>
    implements org.apache.avro.data.RecordBuilder<WholeSchema> {

    private com.gerald.model.avro.MyRecord myRecord;
    private com.gerald.model.avro.MyRecord.Builder myRecordBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.gerald.model.avro.WholeSchema.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.myRecord)) {
        this.myRecord = data().deepCopy(fields()[0].schema(), other.myRecord);
        fieldSetFlags()[0] = true;
      }
      if (other.hasMyRecordBuilder()) {
        this.myRecordBuilder = com.gerald.model.avro.MyRecord.newBuilder(other.getMyRecordBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing WholeSchema instance
     * @param other The existing instance to copy.
     */
    private Builder(com.gerald.model.avro.WholeSchema other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.myRecord)) {
        this.myRecord = data().deepCopy(fields()[0].schema(), other.myRecord);
        fieldSetFlags()[0] = true;
      }
      this.myRecordBuilder = null;
    }

    /**
      * Gets the value of the 'myRecord' field.
      * @return The value.
      */
    public com.gerald.model.avro.MyRecord getMyRecord() {
      return myRecord;
    }

    /**
      * Sets the value of the 'myRecord' field.
      * @param value The value of 'myRecord'.
      * @return This builder.
      */
    public com.gerald.model.avro.WholeSchema.Builder setMyRecord(com.gerald.model.avro.MyRecord value) {
      validate(fields()[0], value);
      this.myRecordBuilder = null;
      this.myRecord = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'myRecord' field has been set.
      * @return True if the 'myRecord' field has been set, false otherwise.
      */
    public boolean hasMyRecord() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'myRecord' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.gerald.model.avro.MyRecord.Builder getMyRecordBuilder() {
      if (myRecordBuilder == null) {
        if (hasMyRecord()) {
          setMyRecordBuilder(com.gerald.model.avro.MyRecord.newBuilder(myRecord));
        } else {
          setMyRecordBuilder(com.gerald.model.avro.MyRecord.newBuilder());
        }
      }
      return myRecordBuilder;
    }

    /**
     * Sets the Builder instance for the 'myRecord' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.gerald.model.avro.WholeSchema.Builder setMyRecordBuilder(com.gerald.model.avro.MyRecord.Builder value) {
      clearMyRecord();
      myRecordBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'myRecord' field has an active Builder instance
     * @return True if the 'myRecord' field has an active Builder instance
     */
    public boolean hasMyRecordBuilder() {
      return myRecordBuilder != null;
    }

    /**
      * Clears the value of the 'myRecord' field.
      * @return This builder.
      */
    public com.gerald.model.avro.WholeSchema.Builder clearMyRecord() {
      myRecord = null;
      myRecordBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public WholeSchema build() {
      try {
        WholeSchema record = new WholeSchema();
        if (myRecordBuilder != null) {
          record.myRecord = this.myRecordBuilder.build();
        } else {
          record.myRecord = fieldSetFlags()[0] ? this.myRecord : (com.gerald.model.avro.MyRecord) defaultValue(fields()[0]);
        }
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<WholeSchema>
    WRITER$ = (org.apache.avro.io.DatumWriter<WholeSchema>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<WholeSchema>
    READER$ = (org.apache.avro.io.DatumReader<WholeSchema>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
